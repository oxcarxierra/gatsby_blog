{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/ml_library_cheatsheet","result":{"data":{"markdownRemark":{"id":"df65c730-596e-512f-a1ef-455f234f6809","html":"<h1 id=\"pandas\" style=\"position:relative;\"><a href=\"#pandas\" aria-label=\"pandas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pandas</h1>\n<p><strong>A DataFrame</strong> is a table. It contains an array of individual <em>entries.</em></p>\n<p>row name을 <code class=\"language-text\">index = [’A’,’B’]</code>로 할당 가능</p>\n<p><strong>A Series</strong> is a sequence of data values, a single column of a DataFrame.</p>\n<p><code class=\"language-text\">index=[’A’,’B’],name=”SERIES NAME”</code></p>\n<p><code class=\"language-text\">pd.read_csv(’’, index_col=0)</code> : index_col은 가져오지 않음.</p>\n<p><code class=\"language-text\">DataFrame.to_csv(’name.csv’)</code> : name.csv으로 저장</p>\n<p><code class=\"language-text\">DataFrame.shape</code> : 크기 m by n</p>\n<p><code class=\"language-text\">DataFrame.describe()</code> : count, mean, Q1, Q2, Q3…</p>\n<p><code class=\"language-text\">DataFrame.iloc[:, 0]</code> : Index - based selection. row first, column next.</p>\n<p><code class=\"language-text\">DataFrame.loc[: , ‘title’]</code> : Label - based selction.</p>\n<p><code class=\"language-text\">DataFrame.set_index[‘title’]</code> : index열의 이름을 붙여줌.</p>\n<p>.loc[] 내에 조건을 주어 접근 가능, &#x26; , | 사용 가능</p>\n<p><code class=\"language-text\">isin</code> : <code class=\"language-text\">reviews.country.isin(['Italy', 'France'])</code></p>\n<p><code class=\"language-text\">isnull | notnull</code> : <code class=\"language-text\">reviews.price.notnull()</code></p>\n<p><code class=\"language-text\">DataFrame[’column_name’]</code> : 열 접근</p>\n<p><code class=\"language-text\">DataFrame.columns</code> : 칼럼 인덱스만 배열로 보여줌.</p>\n<h3 id=\"summary-functions\" style=\"position:relative;\"><a href=\"#summary-functions\" aria-label=\"summary functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>“Summary Functions”</h3>\n<p><code class=\"language-text\">Series.mean()</code></p>\n<p><code class=\"language-text\">Series.unique()</code> : unique value array</p>\n<p><code class=\"language-text\">Series.value_counts()</code> : unique value와 그 빈도</p>\n<h3 id=\"열의-각-원소에-접근하는-방법-2가지\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EC%9D%98-%EA%B0%81-%EC%9B%90%EC%86%8C%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-2%EA%B0%80%EC%A7%80\" aria-label=\"열의 각 원소에 접근하는 방법 2가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열의 각 원소에 접근하는 방법 2가지</h3>\n<p><code class=\"language-text\">Series.map(lambda p : ~~~ )</code> : 원소를 P로 매개변수화해서 접근</p>\n<p><code class=\"language-text\">DataFrame.apply(method, axis=”columns”)</code> : row를 변수로 받는 메소드</p>\n<p>! 둘 다 새로운 DataFrame이나 Series를 리턴하며, 원래의 것을 변형시키지 않는다.</p>\n<p>사실 이런 연산도 가능하다 :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">review_points_mean <span class=\"token operator\">=</span> reviews<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nreviews<span class=\"token punctuation\">.</span>points <span class=\"token operator\">-</span> review_points_mean</code></pre></div>\n<p><code class=\"language-text\">DataFrame.groupby([’columnA,'columnB’])</code> : column의 value가 같은 데이터를 묶는다.</p>\n<p>column이 여러개인 경우 Multi-index가 생성. 말그대로 index를 구성하는 데이터가 두개 이상.</p>\n<p>multi-index를 풀려면 <code class=\"language-text\">.reset_index()</code></p>\n<p><code class=\"language-text\">DataFrame.groupby().column.agg(['functionA','functionB']</code> : multi function</p>\n<p><code class=\"language-text\">DataFrame.sort_values(by=[’columnA’,'columnB'], ascending=Boolean)</code> : 데이터 순서 정렬</p>\n<p><code class=\"language-text\">DataFrame.sort_index()</code> : index순서로 정렬</p>\n<p><code class=\"language-text\">Series.dtype</code> : column의 data type</p>\n<p><code class=\"language-text\">Series.astype('type')</code> : column의 data type을 변환</p>\n<p>! NaN은 float64타입으로 취급된다</p>\n<p><code class=\"language-text\">pd.isnull(DataFrame.column)</code> : column의 value = NaN인 row만 추출</p>\n<p><code class=\"language-text\">Series.fillna('something')</code> : 해당 column의 nan값을 something으로 바꿔줌</p>\n<p><code class=\"language-text\">Series.replace('value1','value2')</code> : 해당 column중 value1인 것들을 value2로 바꿈</p>\n<p><code class=\"language-text\">DataFrame.rename(columns={'before':'after'})</code></p>\n<p><code class=\"language-text\">pd.concat([DF1,DF2])</code> : field(column)이 모두 동일한 두 DF를 합침</p>\n<p><code class=\"language-text\">DF1.join(DF2, lsuffix='', rsuffix='')</code> : index가 동일한 두 DF를 합침. lsuffix, rsuffix는 두 DF의 같은 column이 있을 때 column name 뒤에 추가됨</p>\n<h1 id=\"seaborn\" style=\"position:relative;\"><a href=\"#seaborn\" aria-label=\"seaborn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Seaborn</h1>\n<p><code class=\"language-text\">plt.figure(figsize=(14,6))</code> set size of chart</p>\n<p><strong>Line Charts</strong></p>\n<p><code class=\"language-text\">sns.lineplot(data='', label='')</code></p>\n<p><strong>Bar Charts</strong></p>\n<p><code class=\"language-text\">sns.barplot(x=column, y=column)</code></p>\n<p><strong>Heatmap</strong></p>\n<p><code class=\"language-text\">sns.heatmap(data=data, annot=Boolean)</code> annot : cell 위에 숫자 표시 여부</p>\n<p><strong>ScatterPlot</strong></p>\n<p><code class=\"language-text\">sns.scatterplot(x=columnA, y=columnB, hue?=columnC)</code> : hue에 넣은 column은 색으로 구분</p>\n<p><code class=\"language-text\">sns.regplot(x=columnA, y=columnB)</code> : regression line</p>\n<p><code class=\"language-text\">sns.lmplot(x=columnName, y=columnName, hue=columnName, data=data)</code></p>\n<p><strong>Histogram</strong> : y축은 항상 count</p>\n<p><code class=\"language-text\">sns.histplot(column)</code></p>\n<p><strong>kernel density estimate (KDE)</strong> <strong>Plot :</strong> smoothed histogram</p>\n<p><code class=\"language-text\">sns.kdeplot(data=column, shade=Boolean)</code> : 1D</p>\n<p><code class=\"language-text\">sns.jointplot(x=column, y=column, kind=\"kde\")</code></p>\n<h3 id=\"style\" style=\"position:relative;\"><a href=\"#style\" aria-label=\"style permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Style</h3>\n<p><code class=\"language-text\">sns.setstyle('option')</code></p>\n<p>(1)<code class=\"language-text\">\"darkgrid\"</code>\n(2)<code class=\"language-text\">\"whitegrid\"</code>\n(3)<code class=\"language-text\">\"dark\"</code>\n(4)<code class=\"language-text\">\"white\"</code>\n(5)<code class=\"language-text\">\"ticks\"</code></p>","fields":{"slug":"/posts/ml_library_cheatsheet","tagSlugs":null},"frontmatter":{"date":"2022-07-09","description":"What I learned in Kaggle Pandas, Seaborn course","tags":null,"category":"Projects","title":"ML Library cheatsheet","socialImage":{"publicURL":"/static/aac190ab60d69e61ad7707c55ce0b40c/ryan.png"}}}},"pageContext":{"slug":"/posts/ml_library_cheatsheet"}},"staticQueryHashes":["1722810546","251939775","401334301"]}